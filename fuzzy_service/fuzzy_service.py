import paho.mqtt.client as mqtt
import skfuzzy as fuzz
import numpy as np
import json

# H√†m khi k·∫øt n·ªëi MQTT th√†nh c√¥ng
def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))
    client.subscribe("home/soil_data")  # Ch·ªß ƒë·ªÅ nh·∫≠n d·ªØ li·ªáu ƒë·ªô ·∫©m/nhi·ªát ƒë·ªô

# H√†m x·ª≠ l√Ω m·ªói khi c√≥ d·ªØ li·ªáu m·ªõi
def on_message(client, userdata, msg):
    try:
        data = json.loads(msg.payload.decode())
        moisture = float(data.get("moisture", 0))
        temperature = float(data.get("temperature", 0))

        # Rule logic ƒë∆°n gi·∫£n (thay th·∫ø fuzzy th·∫≠t n·∫øu ch∆∞a d√πng scikit-fuzzy)
        if moisture < 30 and temperature > 30:
            result = "high"
        elif moisture < 60:
            result = "medium"
        else:
            result = "low"

        print(f"Moisture: {moisture} - Temp: {temperature} ‚Üí Irrigation level: {result}")
        client.publish("home/irrigation_level", result)

    except Exception as e:
        print("Error processing message:", e)

# K·∫øt n·ªëi MQTT
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect("192.168.1.42", 1883, 60)  # üëâ ƒê·ªïi IP th√†nh MQTT broker c·ªßa b·∫°n

client.loop_forever()
